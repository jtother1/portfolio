{"version":3,"sources":["NavBar.js","pages/Resume.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","className","Brand","Nav","Link","href","Resume","Component","App","NavBar","exact","path","component","Carousel","Item","Card","style","width","Img","variant","src","Body","Title","Text","Button","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAeeA,MAXf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,OAChB,kBAACD,EAAA,EAAOE,MAAR,CAAcD,UAAU,QAAxB,eACA,kBAACE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUC,KAAK,WAAf,a,uECFOC,E,uKAHX,OAAO,uBAAGL,UAAU,UAAb,a,GAFUM,aCgINC,MAxHf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,OACb,kBAACQ,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWN,IACvC,6BACE,kBAACO,EAAA,EAAD,CAAUZ,UAAU,YAClB,kBAACY,EAAA,EAASC,KAAV,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAI,yBAC5B,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,CAAYrB,UAAU,SAAtB,gBACA,kBAACc,EAAA,EAAKQ,KAAN,KACE,2BACE,4FAIA,8EACA,qFAGA,sEAGJ,kBAACC,EAAA,EAAD,CAAQvB,UAAU,SAASwB,SAAS,yCAClC,uBAAGpB,KAAK,yCAAR,gBAOR,kBAACQ,EAAA,EAASC,KAAV,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAI,4BAC5B,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,mBACA,kBAACP,EAAA,EAAKQ,KAAN,KACE,4BACE,kDACA,kGAIA,sFAGA,qFAGA,oFAGA,uGAMJ,kBAACC,EAAA,EAAD,CAAQvB,UAAU,UAAlB,eAIN,kBAACY,EAAA,EAASC,KAAV,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAI,0BAC5B,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,kBACA,2BACE,oEACA,gGAIA,qGAIA,8KAKA,+DAEF,kBAACE,EAAA,EAAD,CAAQvB,UAAU,UAAlB,eAIN,kBAACY,EAAA,EAASC,KAAV,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAI,iCAC5B,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,0BACA,2BACE,mEACA,mIAIA,oFAGA,iEAEF,kBAACE,EAAA,EAAD,CAAQvB,UAAU,UAAlB,qBC1GAyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2aa836af.chunk.js","sourcesContent":["import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\n\nfunction NavigationBar() {\n  return (\n    <Navbar className=\"nav\">\n      <Navbar.Brand className=\"name\">Juan Quiroz</Navbar.Brand>\n      <Nav>\n        <Nav.Link href=\"/resume\">Resume</Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n}\n\nexport default NavigationBar;\n","import React, { Component } from \"react\";\n\nclass Resume extends Component {\n  render() {\n    return <p className=\"resume\">kdjjg</p>;\n  }\n}\nexport default Resume;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./NavBar\";\nimport { Carousel, Button, Card } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// import greybackground from '../src/greybackground.jpg'\nimport Resume from \"./pages/Resume\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/resume\" component={Resume}></Route>\n          <div>\n            <Carousel className=\"carousel\">\n              <Carousel.Item>\n                <Card style={{ width: \"18rem\" }}>\n                  <Card.Img variant=\"top\" src=\"./images/hangman.png\" />\n                  <Card.Body>\n                    <Card.Title className=\"title\">Hangman Game</Card.Title>\n                    <Card.Text>\n                      <p>\n                        <li>\n                          Used HTML5 and CSS3 to create the visual of my hangman\n                          game.\n                        </li>\n                        <li>Used Javascript for functionality of the game.</li>\n                        <li>\n                          Used Git throughout the process of building the game.\n                        </li>\n                        <li>Project deployed using GitHub Pages.</li>\n                      </p>\n                    </Card.Text>\n                    <Button className=\"button\" onSubmit='https://jtother1.github.io/project-1/'>\n                      <a href=\"https://jtother1.github.io/project-1/\">\n                        View App\n                      </a>\n                    </Button>\n                  </Card.Body>\n                </Card>\n              </Carousel.Item>\n              <Carousel.Item>\n                <Card style={{ width: \"18rem\" }}>\n                  <Card.Img variant=\"top\" src=\"./images/brew-buddy.png\" />\n                  <Card.Body>\n                    <Card.Title>Brew-Buddy</Card.Title>\n                    <Card.Text>\n                      <ul>\n                        <li>Drew up wireframes</li>\n                        <li>\n                          Used HTML5/CSS3/React/Javascript to create components\n                          for the app.\n                        </li>\n                        <li>\n                          Used a third party API and axios to fetch Information.\n                        </li>\n                        <li>\n                          Utilized local storage for saving lists of breweries.\n                        </li>\n                        <li>\n                          Used Git throughout the process for version control.\n                        </li>\n                        <li>\n                          Project deployed using Heroku on\n                          https://brew-buddyapp.herokuapp.com/\n                        </li>\n                      </ul>\n                    </Card.Text>\n                    <Button className=\"button\">View App</Button>\n                  </Card.Body>\n                </Card>\n              </Carousel.Item>\n              <Carousel.Item>\n                <Card style={{ width: \"18rem\" }}>\n                  <Card.Img variant=\"top\" src=\"./images/foodchat.png\" />\n                  <Card.Body>\n                    <Card.Title>Food Chat</Card.Title>\n                    <p>\n                      <li>Created wireframes for the project. </li>\n                      <li>\n                        Collaborated with a team and used pair programming for\n                        this app.\n                      </li>\n                      <li>\n                        HTML5/CSS3/Express/Mongoose/Javascript/React/Bootstrap/created\n                        an API\n                      </li>\n                      <li>\n                        Used Git throughout the process for version control, and\n                        to test new features on a new branch before implementing\n                        them into the master branch.\n                      </li>\n                      <li>Project deployed using Heroku.</li>\n                    </p>\n                    <Button className=\"button\">View App</Button>\n                  </Card.Body>\n                </Card>\n              </Carousel.Item>\n              <Carousel.Item>\n                <Card style={{ width: \"18rem\" }}>\n                  <Card.Img variant=\"top\" src=\"./images/ringoandfriends.png\" />\n                  <Card.Body>\n                    <Card.Title>Ringo and Friends</Card.Title>\n                    <p>\n                      <li>Created wireframes for the project.</li>\n                      <li>\n                        Incorporated React app for the front end functionality\n                        and a Django Rest framework for the backend.\n                      </li>\n                      <li>\n                        Created a custom user and simple Jwt-authentication.\n                      </li>\n                      <li>s Project deployed using Heroku.</li>\n                    </p>\n                    <Button className=\"button\">View App</Button>\n                  </Card.Body>\n                </Card>\n              </Carousel.Item>\n            </Carousel>\n          </div>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}